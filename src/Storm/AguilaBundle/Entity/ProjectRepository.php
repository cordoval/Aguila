<?php

namespace Storm\AguilaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\Security\Acl\Domain\UserSecurityIdentity;
use Symfony\Component\Security\Acl\Permission\MaskBuilder;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{

    /**
     * @param User $user
     * @return array
     */
    public function findAcesForUser(User $user)
    {
        $sid = UserSecurityIdentity::fromAccount($user);
        $identifier = $sid->getClass().'-'.$sid->getUsername();

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('class_type', 'class_type');
        $rsm->addScalarResult('object_identifier', 'object_identifier');
        $rsm->addScalarResult('mask', 'mask');

        $query = $this->_em->createNativeQuery(
                'SELECT c.class_type, oid.object_identifier, e.mask '.
                'FROM acl_security_identities sid '.
                'JOIN acl_entries e ON sid.id = e.security_identity_id '.
                'JOIN acl_object_identities oid ON (e.class_id = oid.class_id AND (e.object_identity_id = oid.id OR e.object_identity_id IS NULL)) '.
                'JOIN acl_classes c ON oid.class_id = c.id '.
                'WHERE sid.identifier = :identifier'
            , $rsm);
        $query->setParameter('identifier', $identifier);

        $result = array();
        foreach ($query->getResult() as $i => $row)
        {
            $result[$i]['objectType']       = $row['class_type'];
            $result[$i]['objectIdentifier'] = $row['object_identifier'];
            $result[$i]['permissions']      = $row['mask'];
        }
        return $result;
    }

    public function findProjectsForUser(User $user)
    {
        $sid = UserSecurityIdentity::fromAccount($user);
        $identifier = $sid->getClass().'-'.$sid->getUsername();

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('AguilaBundle:Project', 'p');
        $rsm->addFieldResult('p', 'id', 'id');
        $rsm->addFieldResult('p', 'name', 'name');
        $rsm->addFieldResult('p', 'slug', 'slug');
        //$rsm->addFieldResult('p', 'features', 'features');
        $rsm->addFieldResult('p', 'task_counter', 'taskCounter');
        $rsm->addFieldResult('p', 'public', 'public');

        $query = $this->_em->createNativeQuery(
                'SELECT p.* FROM Project p WHERE p.id IN '.
                    '(SELECT oid.object_identifier '.
                        'FROM acl_security_identities sid '.
                        'JOIN acl_entries e ON sid.id = e.security_identity_id '.
                        'JOIN acl_object_identities oid ON (e.class_id = oid.class_id AND (e.object_identity_id = oid.id OR e.object_identity_id IS NULL)) '.
                        'JOIN acl_classes c ON oid.class_id = c.id '.
                        'WHERE sid.identifier = :identifier '.
                        'AND c.class_type = :class '.
                    ');'
            , $rsm);

        $query->setParameter('identifier', $identifier);
        $query->setParameter('class', 'Storm\AguilaBundle\Entity\Project');
        $events = $query->getResult();

        return $events;
    }
}
